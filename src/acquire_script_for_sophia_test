/*
This script takes a bias, a dark and then an exposure
Exposure time for the dark and science images is set to 120ms for testing purposes
Number of exposures is set to 10
Added ROIs
*/
#include "stdio.h"
#include "picam.h"
#include <iostream>
#include <sstream>

#define NO_TIMEOUT  -1
#define NUM_EXPOSURES  3
#define DEFAULT_EXPOSURE_TIME 120.0 // Default exposure time in milliseconds
#define ACQUIRE_TIMEOUT 15000  // Fifteen-second timeout

// Global ROI variables
piint roi_x = 100;      // X position
piint roi_y = 100;      // Y position
piint roi_width = 500;  // Width
piint roi_height = 400; // Height

void PrintEnumString(PicamEnumeratedType type, piint value)
{
    const pichar* string;
    Picam_GetEnumerationString(type, value, &string);
    printf("%s", string);
    Picam_DestroyString(string);
}

void PrintError(PicamError error)
{
    if (error == PicamError_None)
        printf("Succeeded\n");
    else
    {
        printf("Failed (");
        PrintEnumString(PicamEnumeratedType_Error, error);
        printf(")\n");
    }
}

void get_exposure_time(PicamHandle camera)
{
    printf("Getting current exposure time...\n");
    PicamError err;
    piflt expTime;
    err = Picam_GetParameterFloatingPointValue(camera, PicamParameter_ExposureTime, &expTime);
    if (err != PicamError_None)
    {
        printf("Failed to get exposure time.\n");
        PrintError(err);
    }
    else
    {
        printf("Exposure time is: %.2f ms\n", expTime);
    }
}

void set_exposure_time(PicamHandle camera, piflt exposure_time)
{
    get_exposure_time(camera);
    printf("Setting new exposure time...\n");
    PicamError error = Picam_SetParameterFloatingPointValue(camera, PicamParameter_ExposureTime, exposure_time);
    if (error != PicamError_None)
    {
        printf("Failed to set exposure time.\n");
        PrintError(error);
    }
    else
    {
        printf("Exposure time set to: %.2f ms\n", exposure_time);
    }
}

void get_shutter(PicamHandle camera)
{
    printf("Getting shutter mode...\n");
    PicamError error;
    piint mode;
    error = Picam_GetParameterIntegerValue(camera, PicamParameter_ShutterTimingMode, &mode);
    // PrintError(error);

    if (error == PicamError_None)
    {
        const char* modeDescription = "Unknown shutter status";
        switch (mode) {
            case 1:
                modeDescription = "normal timing mode";
                break;
            case 2:
                modeDescription = "shutter always closed";
                break;
            case 3:
                modeDescription = "shutter always open";
                break;
            case 4:
                modeDescription = "shutter open before trigger";
                break;
            default:
                break;
        }
        std::cout << modeDescription << std::endl;
    }
    else
    {
        std::cout << "Failed to get shutter timing mode." << std::endl;
    }
}


void set_shutter(PicamHandle camera, piint mode)
{
    PicamError error;
    get_shutter(camera);
    printf("Setting shutter mode...\n");
    error = Picam_SetParameterIntegerValue(camera, PicamParameter_ShutterTimingMode, mode);
    if (error == PicamError_None){
    const char* shutterDescription = "unknown";
    switch (mode) {
        case 1:
            shutterDescription = "normal";
            break;
        case 2:
            shutterDescription = "always closed";
            // printf("closed: ");
            break;
        case 3:
            shutterDescription = "always open";

            // printf("open: ");
            break;
        case 4:
            shutterDescription = "open before trigger";

            // printf("open before trigger: ");
            break;
    }
    std::cout << "New shutter mode: " << shutterDescription << std::endl;
    }
    else
    {
        std::cout << "Failed to set shutter mode." << std::endl;
    }

    // PrintError(error);
}


void get_temp(PicamHandle camera)
{
    PicamError error;
    std::cout << "Getting sensor temperature..."<< std::endl;
    piflt temperature;
    error = Picam_ReadParameterFloatingPointValue(
        camera,
        PicamParameter_SensorTemperatureReading,
        &temperature);
    PrintError(error);
    if (error == PicamError_None)
    {
        std::cout << "Current temperature is "
                  << temperature << " degrees C" << std::endl;
    }
}

void set_temp(PicamHandle camera, piflt temp)
{
    get_temp(camera);
    PicamError error;
    // Check sensor temperature status
    std::cout << "Checking sensor temperature status..."<< std::endl;
    PicamSensorTemperatureStatus status;
    error = Picam_ReadParameterIntegerValue(
        camera,
        PicamParameter_SensorTemperatureStatus,
        reinterpret_cast<piint*>(&status));
    PrintError(error);
    if (error == PicamError_None)
    {
        std::cout << "Status is: ";
        PrintEnumString(PicamEnumeratedType_SensorTemperatureStatus, status);
        std::cout << std::endl;

        // If temperature is locked, set the temperature set point
        if (status == PicamSensorTemperatureStatus_Locked)
        {
            std::cout << "Setting sensor temperature..."<< std::endl;
            error = Picam_SetParameterFloatingPointValue(
                camera,
                PicamParameter_SensorTemperatureSetPoint,
                temp);
            PrintError(error);
        }
        else
        {
            std::cout << "Temperature is not locked. Skipping setting temperature." << std::endl;
        }
        
    }

}

// // Function to create a directory
// void createDirectory(const std::string& dir) {
//     struct stat info;

//     if (stat(dir.c_str(), &info) != 0) {
//         // Directory does not exist, try to create it
//         if (mkdir(dir.c_str(), 0755) != 0) {
//             std::cerr << "Error creating directory " << dir << ": " << strerror(errno) << std::endl;
//         } else {
//             std::cout << "Directory " << dir << " created." << std::endl;
//         }
//     } else if (!(info.st_mode & S_IFDIR)) {
//         std::cerr << dir << " exists but is not a directory." << std::endl;
//     }
// }

// void get_next_filename()
// {

// }

// void get_last_filename()
// {

// }


void get_analog_gain(PicamHandle camera)
{
    std::cout << "Getting adc analog gain..." << std::endl;
    PicamError error;
    piint gainValue;
    error = Picam_GetParameterIntegerValue(camera, PicamParameter_AdcAnalogGain, &gainValue);

    // Print current analog gain
    if (error == PicamError_None)
    {
        const char* gainDescription = "unknown";
        switch (gainValue) {
            case 1:
                gainDescription = "low";
                break;
            case 2:
                gainDescription = "medium";
                break;
            case 3:
                gainDescription = "high";
                break;
        }
        std::cout << "Current analog gain value: " << gainDescription << std::endl;
    }
    else
    {
        std::cout << "Failed to get analog gain." << std::endl;
    }
}

/*    PicamAdcAnalogGain_Low    = 1,
    PicamAdcAnalogGain_Medium = 2,
    PicamAdcAnalogGain_High   = 3*/

void set_analog_gain(PicamHandle camera, piint val)
{
    PicamError error;
    get_analog_gain(camera);
    printf("Setting adc analog gain...\n");
    
    const char* gainDescription = "unknown";
    switch (val) {
        case 1:
            gainDescription = "low";
            break;
        case 2:
            gainDescription = "medium";
            break;
        case 3:
            gainDescription = "high";
            break;
    }
    std::cout << "New analog gain value: " << gainDescription << std::endl;

    // printf("%s\n", gainDescription);

    error = Picam_SetParameterIntegerValue(camera, PicamParameter_AdcAnalogGain, val);


    // std::cout << "Set analog gain: ";
    // error = Picam_SetParameterIntegerValue(camera, PicamParameter_AdcAnalogGain, gainValue);
    // PrintError(error);

    // Store the gain value in params
    if (error == PicamError_None)
    {
        // params.gainValue = gainValue; // Update params with the new gain value
        std::cout << "Checking analog gain value... \nAnalog gain: " << gainDescription << std::endl;
    }
}



void get_single_roi(PicamHandle camera)
{
    PicamError err;
    const PicamRois* region;

    // Get current ROI values
    err = Picam_GetParameterRoisValue(camera, PicamParameter_Rois, &region);
    if (err == PicamError_None)
    {
        if (region->roi_count > 0)
        {
            const PicamRoi& roi = region->roi_array[0];
            printf("Current ROI:\n");
            printf("  x: %d\n", roi.x);
            printf("  y: %d\n", roi.y);
            printf("  width: %d\n", roi.width);
            printf("  height: %d\n", roi.height);
            printf("  x_binning: %d\n", roi.x_binning);
            printf("  y_binning: %d\n", roi.y_binning);
        }
        else
        {
            printf("No ROIs are currently set.\n");
        }

        Picam_DestroyRois(region);
    }
    else
    {
        printf("Failed to get ROI values.\n");
        PrintError(err);
    }
}

void set_single_roi(PicamHandle camera)
{
    get_single_roi(camera);
    PicamError err;
    const PicamParameter* paramsFailed;
    piint failCount;

    // Initialize the ROI structure
    PicamRois roi;
    PicamRoi roiArray[1];
    roi.roi_count = 1;
    roi.roi_array = roiArray;

    // Get the constraints
    const PicamRoisConstraint* constraint;
    err = Picam_GetParameterRoisConstraint(camera, PicamParameter_Rois, PicamConstraintCategory_Required, &constraint);
    if (err == PicamError_None)
    {
        // piint totalWidth = (piint)constraint->width_constraint.maximum;
        // piint totalHeight = (piint)constraint->height_constraint.maximum;
        Picam_DestroyRoisConstraints(constraint);

        // Set the ROI parameters
        roi.roi_array[0].x = roi_x;
        roi.roi_array[0].y = roi_y;
        roi.roi_array[0].width = roi_width;
        roi.roi_array[0].height = roi_height;
        roi.roi_array[0].x_binning = 1; // Default binning, adjust as needed
        roi.roi_array[0].y_binning = 1; // Default binning, adjust as needed

        // Set the ROI on the camera
        err = Picam_SetParameterRoisValue(camera, PicamParameter_Rois, &roi);
        if (err == PicamError_None)
        {
            // Commit parameters
            err = Picam_CommitParameters(camera, &paramsFailed, &failCount);
            Picam_DestroyParameters(paramsFailed);
            if (err == PicamError_None)
            {
                printf("ROI set and committed successfully.\n");
            }
            else
            {
                printf("Failed to commit ROI parameters. ");
                PrintError(err);
            }
        }
        else
        {
            printf("Failed to set ROI parameters. ");
            PrintError(err);
        }
    }
    else
    {
        printf("Failed to get ROI constraints. ");
        PrintError(err);
    }
}

void open_camera()
{
    Picam_InitializeLibrary();
    PicamHandle camera;
    PicamCameraID id;
    piint readoutstride;
    const pichar* string;
    std::cout << "Open camera" << std::endl;

    if (Picam_OpenFirstCamera(&camera) == PicamError_None)
        Picam_GetCameraID(&camera, &id);
    else
    {
        Picam_ConnectDemoCamera(PicamModel_Pixis100F, "0008675309", &id);
        Picam_OpenCamera(&id, &camera);
        printf("No Camera Detected, Creating Demo Camera\n");
    }

    Picam_GetEnumerationString(PicamEnumeratedType_Model, id.model, &string);
    printf("%s", string);
    printf(" (SN:%s) [%s]\n", id.serial_number, id.sensor_name);
    Picam_DestroyString(string);

    Picam_GetParameterIntegerValue(camera, PicamParameter_ReadoutStride, &readoutstride);
    set_single_roi(camera);
    set_temp(camera, -50.0);
    set_analog_gain(camera, 2);
    set_shutter(camera, 2);
    set_exposure_time(camera, 10.0);

}

void close_camera(PicamHandle camera)
{
    std::cout << "Close camera" << std::endl;
    Picam_CloseCamera(camera);
    Picam_UninitializeLibrary();
}

void expose(PicamHandle camera)
{
    std::cout << "Take exposure" << std::endl;
    PicamAvailableData data;
    PicamAcquisitionErrorsMask errors;
    piflt exposure_time = DEFAULT_EXPOSURE_TIME; // Default exposure time

    set_exposure_time(camera, exposure_time);
    set_shutter(camera, 1); // Set shutter mode to normal
    set_single_roi(camera); // Set ROI

    pibln committed;
    PicamError error = Picam_AreParametersCommitted(camera, &committed);
    if (error != PicamError_None || !committed)
    {
        const PicamParameter* failed_parameters;
        piint failed_parameter_count;
        error = Picam_CommitParameters(camera, &failed_parameters, &failed_parameter_count);
        if (error != PicamError_None)
        {
            printf("Failed to commit parameters. ");
            PrintError(error);
            return;
        }
        if (failed_parameter_count > 0)
        {
            Picam_DestroyParameters(failed_parameters);
        }
    }

    Picam_Acquire(camera, 1, NO_TIMEOUT, &data, &errors);
}

void dark(PicamHandle camera)
{
    std::cout << "Take dark" << std::endl;
    set_shutter(camera, 2); // Set shutter mode to closed
    set_single_roi(camera); // Set ROI
    PicamAvailableData data;
    PicamAcquisitionErrorsMask errors;
    piflt exposure_time = DEFAULT_EXPOSURE_TIME; // Default exposure time

    set_exposure_time(camera, exposure_time);

    pibln committed;
    PicamError error = Picam_AreParametersCommitted(camera, &committed);
    if (error != PicamError_None || !committed)
    {
        const PicamParameter* failed_parameters;
        piint failed_parameter_count;
        error = Picam_CommitParameters(camera, &failed_parameters, &failed_parameter_count);
        if (error != PicamError_None)
        {
            printf("Failed to commit parameters. ");
            PrintError(error);
            return;
        }
        if (failed_parameter_count > 0)
        {
            Picam_DestroyParameters(failed_parameters);
        }
    }

    Picam_Acquire(camera, 1, NO_TIMEOUT, &data, &errors);
}

void bias(PicamHandle camera)
{
    std::cout << "Take bias" << std::endl;
    set_shutter(camera, 3); // Set shutter mode to open
    set_single_roi(camera); // Set ROI
    PicamAvailableData data;
    PicamAcquisitionErrorsMask errors;
    piflt exposure_time = 0; // Default exposure time
    set_exposure_time(camera, exposure_time);

    pibln committed;
    PicamError error = Picam_AreParametersCommitted(camera, &committed);
    if (error != PicamError_None || !committed)
    {
        const PicamParameter* failed_parameters;
        piint failed_parameter_count;
        error = Picam_CommitParameters(camera, &failed_parameters, &failed_parameter_count);
        if (error != PicamError_None)
        {
            printf("Failed to commit parameters. ");
            PrintError(error);
            return;
        }
        if (failed_parameter_count > 0)
        {
            Picam_DestroyParameters(failed_parameters);
        }
    }

    Picam_Acquire(camera, 1, NO_TIMEOUT, &data, &errors);
}

// int add_header()
// {


    
// }

int main()
{
    // PicamHandle camera;
    // PicamCameraID id;
    // piint readoutstride;
    open_camera();

    // for (int i = 0; i < NUM_EXPOSURES; ++i)
    // {
    //     bias(camera);
    //     dark(camera);
    //     expose(camera);
    // }
    // close_camera(camera);
}
